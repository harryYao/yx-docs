(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{354:function(n,e,a){"use strict";a.r(e);var t=a(41),o=Object(t.a)({},(function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"window-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#window-name"}},[n._v("#")]),n._v(" window.name")]),n._v(" "),a("p",[n._v("在整理js基础类型知识的时候，在chrome浏览器console中调试时，发现了如下问题！\ntypeof (new String('Tom')) // 正常是object类型\n使用name这个变量测试时，却为string, 而其他变量名都是 object")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("  var name = new String('Tom')\n  typeof name\n  \"string\"\n  var name2 = new String('Tom')\n  typeof name2\n  \"object\"\n")])])]),a("h4",{attrs:{id:"带着以下的一些疑虑-进行了一番测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#带着以下的一些疑虑-进行了一番测试"}},[n._v("#")]),n._v(" 带着以下的一些疑虑，进行了一番测试")]),n._v(" "),a("ul",[a("li",[n._v("查看其他浏览器的情况，查看nodejs的情况?")]),n._v(" "),a("li",[n._v("是否 name 这个词的特殊性？")])]),n._v(" "),a("blockquote",[a("p",[n._v("经检测， name 这个属性在Chrome&firefox浏览器中的特殊性，为浏览器环境内置的一个属性。\nIE, Node都没有这样的设置。")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("for(var b in window) { \n  if(window.hasOwnProperty(b) && b === 'name') {\n    console.log(b); \n  } \n}\n// name\n")])])]),a("blockquote",[a("p",[n._v("进一步调试发现，不仅String, 任何类型赋值，都会被默认调用.toString() 方法；")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('var name = 1;\nconsole.log(name); // "1"\nvar name = [1,2,3];\nconsole.log(name); // "1,2,3"\nvar name = () => { console.log(\'I\\\'m a function!\')}\nconsole.log(name); // "() => { console.log(\'I\\\'m a function!\')}"\nvar name = new Set();\nconsole.log(name); // "[object Set]"\n')])])]),a("blockquote",[a("p",[n._v('但是使用es6的 const/let 去声明变量的时候，不会被内部转为 "string"')])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("var name = new String('s')\ntypeof name; // \"string\"\nconst name = new String('s')\ntypeof name; // \"object\"\nlet name = new String('s')\ntypeof name; // \"object\"\n\n")])])]),a("h4",{attrs:{id:"进行到此知道了-chrome对象中的-window-name的特殊性-为了了解为何这样的设置-进行了更多了调研"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进行到此知道了-chrome对象中的-window-name的特殊性-为了了解为何这样的设置-进行了更多了调研"}},[n._v("#")]),n._v(" 进行到此知道了 chrome对象中的 window.name的特殊性，为了了解为何这样的设置，进行了更多了调研")]),n._v(" "),a("h2",{attrs:{id:"window-name跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#window-name跨域"}},[n._v("#")]),n._v(" window.name跨域")]),n._v(" "),a("p",[n._v("在页面在浏览器端展示的时候，我们总能在控制台拿到一个全局变量window，该变量有一个name属性，其有以下 特征：")]),n._v(" "),a("ol",[a("li",[n._v("每个窗口都有独立的window.name与之对应；")]),n._v(" "),a("li",[n._v("在一个窗口的生命周期中（被关闭前），窗口载入的所有页面同时共享一个window.name，每个页面对window.name都有读写的权限；")]),n._v(" "),a("li",[n._v("window.name一直存在与当前窗口，即使是有新的页面载入也不会改变window.name的值；")]),n._v(" "),a("li",[n._v("window.name可以存储不超过2M的数据，数据格式按需自定义。")])]),n._v(" "),a("p",[n._v("下面我们就验证一下同一个窗口下，页面重新载入，window.name仍然不变")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<script>\n    // 这里是要传输的数据，大小一般为2M，IE和firefox下可以大至32M左右\n    // 数据格式可以自定义，如json、字符串\n    window.name = "这是a页面的内容"; \n    setTimeout(function(){\n        window.location.href= b.html;\n        console.log(window.name);  //"这是a页面的内容"\n    },2000);\n<\/script>\n')])])]),a("ul",[a("li",[n._v("IE环境也存在 window.name, 但是我们重新定义时不会默认执行.toString()方法")])]),n._v(" "),a("p",[n._v('有时候我们的需求是在https://localhost/a.html页面内，获得"https://xxx.github.io/xxx/"上的数据，并且页面不能进行刷新。')]),n._v(" "),a("p",[n._v('对于这种需求，我们不能通过window.location.href更新页面来获得数据，我们可以用一个隐藏的iframe作为中间的代理，iframe的src为"https://xxx.github.io/xxx/"，在iframe页面加载完毕的时候，我们再让iframe与当前页面属于同一个域下，我们就可以拿到window.name了。')]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<script>\n    function load () {\n        var iframe = document.getElementById(\'iframe\');\n        iframe.onload = function () {\n            var window = iframe .contentWindow;\n            console.log(window.name);\n        }\n        iframe.src = \'about:blank\'; //让url地址改变，与当前页面同源,可以任意写，保持同源就好\n    }\n<\/script>\n<iframe id="iframe" src="https://xxx.github.io/xxx/" onload="load()"></iframe>\n')])])]),a("p",[n._v("完成的跨域代码")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("<script type=\"text/javascript\">\n    var boo = false;\n    var iframe = document.createElement('iframe');\n    var loadData = function() {\n        if (boo) {\n            var data = iframe.contentWindow.name;    //获取window.name\n            console.log(data); \n            //销毁数据   \n            iframe.contentWindow.document.write('');\n            iframe.contentWindow.close();\n            document.body.removeChild(iframe);\n        } else {\n            boo = true;\n            iframe.contentWindow.location = \"b.html\";    // 设置的代理文件,iframe重新载入\n        }  \n    };\n    iframe.src = 'https://xxx.github.io/xxx';\n    if (iframe.attachEvent) {\n        iframe.attachEvent('onload', loadData);\n    } else {\n        iframe.onload  = loadData;\n    }\n    document.body.appendChild(iframe);\n<\/script>\n")])])]),a("p",[n._v("作者：Bennt\n链接：https://www.jianshu.com/p/43ff69d076e3")])])}),[],!1,null,null,null);e.default=o.exports}}]);