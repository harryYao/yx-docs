(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{319:function(t,a,s){"use strict";s.r(a);var n=s(16),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"http协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http协议"}},[t._v("#")]),t._v(" HTTP协议")]),t._v(" "),s("h2",{attrs:{id:"http的五大特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http的五大特点"}},[t._v("#")]),t._v(" HTTP的五大特点")]),t._v(" "),s("ol",[s("li",[t._v("支持客户/服务器模式。")]),t._v(" "),s("li",[t._v("简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。")]),t._v(" "),s("li",[t._v("灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。")]),t._v(" "),s("li",[t._v("无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。早期这么做的原因是请求资源少，追求快。后来通过Connection: Keep-Alive实现长连接")]),t._v(" "),s("li",[t._v("无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("非持久连接和持久连接")]),t._v(" "),s("blockquote",[s("p",[t._v("在实际的应用中，客户端往往会发出一系列请求，接着服务器端对每个请求进行响应。对于这些请求|响应，如果每次都经过一个单独的TCP连接发送，称为非持久连接。反之，如果每次都经过相同的TCP连接进行发送，称为持久连接。")])]),t._v(" "),s("h2",{attrs:{id:"http之请求消息request"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http之请求消息request"}},[t._v("#")]),t._v(" HTTP之请求消息Request")]),t._v(" "),s("p",[t._v("客户端发送一个HTTP请求到服务器的请求消息包括以下格式："),s("br"),t._v("\n请求行（request line）、请求头部（header）、空行和请求数据四个部分组成。"),s("br"),t._v(" "),s("img",{attrs:{src:t.$withBase("/imgs/http_request.jpg"),alt:"foo"}})]),t._v(" "),s("h2",{attrs:{id:"get-请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get-请求"}},[t._v("#")]),t._v(" Get 请求")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[t._v("GET /562f25980001b1b106000338.jpg HTTP/1.1\nHost    img.mukewang.com\nUser"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Agent  Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" like Gecko) Chrome/51.0.2704.106 Safari/537.36\nAccept  image/webp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("image/*"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("*/*;q=0.8")]),t._v("\nReferer http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//www.imooc.com/\nAccept"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Encoding gzip"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" deflate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sdch\nAccept"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Language zh"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("CN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("zh;q=0.8\n")])])]),s("ul",[s("li",[s("p",[t._v("第一部分：请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本.\nGET说明请求类型为GET,[/562f25980001b1b106000338.jpg]为要访问的资源，该行的最后一部分说明使用的是HTTP1.1版本。")])]),t._v(" "),s("li",[s("p",[t._v("第二部分：请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息\n从第二行起为请求头部，HOST将指出请求的目的地.User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.该信息由你的浏览器来定义,并且在每个请求中自动发送等等")])]),t._v(" "),s("li",[s("p",[t._v("第三部分：空行，请求头部后面的空行是必须的\n即使第四部分的请求数据为空，也必须有空行。")])]),t._v(" "),s("li",[s("p",[t._v("第四部分：请求数据也叫主体，可以添加任意的其他数据。\n这个例子的请求数据为空。")])])]),t._v(" "),s("h2",{attrs:{id:"post-请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#post-请求"}},[t._v("#")]),t._v(" POST 请求")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[t._v("POST / HTTP1.1\nHost"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("www.wrox.com\nUser"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Agent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)\nContent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("application/x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("www"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("form"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("urlencoded\nContent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Connection")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Keep"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Alive\n\nname=Professional%20Ajax"),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("&publisher=Wiley")]),t._v("\n")])])]),s("ul",[s("li",[t._v("第一部分：请求行，第一行明了是post请求，以及http1.1版本。")]),t._v(" "),s("li",[t._v("第二部分：请求头部，第二行至第六行。")]),t._v(" "),s("li",[t._v("第三部分：空行，第七行的空行。")]),t._v(" "),s("li",[t._v("第四部分：请求数据，第八行。")])]),t._v(" "),s("h2",{attrs:{id:"http之响应消息response"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http之响应消息response"}},[t._v("#")]),t._v(" HTTP之响应消息Response")]),t._v(" "),s("p",[t._v("一般情况下，服务器接收并处理客户端发过来的请求后会返回一个HTTP的响应消息。"),s("br"),t._v("\nHTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。"),s("br"),t._v(" "),s("img",{attrs:{src:t.$withBase("/imgs/http_response.png"),alt:"foo"}})]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[t._v("HTTP/1.1 200 OK\nDate: Fri, 22 May 2009 06:07:21 GMT\nContent-Type: text/html; charset=UTF-8\n\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("head")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("head")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--body goes here--\x3e")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("ul",[s("li",[s("p",[t._v("第一部分：状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。\n第一行为状态行，（HTTP/1.1）表明HTTP版本为1.1版本，状态码为200，状态消息为（ok）")])]),t._v(" "),s("li",[s("p",[t._v("第二部分：消息报头，用来说明客户端要使用的一些附加信息\n第二行和第三行为消息报头，\nDate:生成响应的日期和时间；Content-Type:指定了MIME类型的HTML(text/html),编码类型是UTF-8")])]),t._v(" "),s("li",[s("p",[t._v("第三部分：空行，消息报头后面的空行是必须的")])]),t._v(" "),s("li",[s("p",[t._v("第四部分：响应正文，服务器返回给客户端的文本信息。\n空行后面的html部分为响应正文。")])])]),t._v(" "),s("h2",{attrs:{id:"http之状态码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http之状态码"}},[t._v("#")]),t._v(" HTTP之状态码")]),t._v(" "),s("p",[t._v("状态代码有三位数字组成，第一个数字定义了响应的类别，共分五种类别:\n1xx：指示信息--表示请求已接收，继续处理\n2xx：成功--表示请求已被成功接收、理解、接受\n3xx：重定向--要完成请求必须进行更进一步的操作\n4xx：客户端错误--请求有语法错误或请求无法实现\n5xx：服务器端错误--服务器未能实现合法的请求")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[t._v("200 OK                        //客户端请求成功\n400 Bad Request               //客户端请求有语法错误，不能被服务器所理解\n401 Unauthorized              //请求未经授权，这个状态代码必须和WWW"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Authenticate报头域一起使用 \n403 Forbidden                 //服务器收到请求，但是拒绝提供服务\n404 Not Found                 //请求资源不存在，eg：输入了错误的URL\n500 Internal Server Error     //服务器发生不可预期的错误\n503 Server Unavailable        //服务器当前不能处理客户端的请求，一段时间后可能恢复正常\n")])])]),s("h2",{attrs:{id:"http工作原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http工作原理"}},[t._v("#")]),t._v(" HTTP工作原理")]),t._v(" "),s("p",[t._v("HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。HTTP协议采用了请求/响应模型。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。")]),t._v(" "),s("p",[t._v("以下是 HTTP 请求/响应的步骤：")]),t._v(" "),s("ul",[s("li",[t._v("1、客户端连接到Web服务器")])]),t._v(" "),s("p",[t._v("一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认为80）建立一个TCP套接字连接。例如，http://www.oakcms.cn。")]),t._v(" "),s("ul",[s("li",[t._v("2、发送HTTP请求")])]),t._v(" "),s("p",[t._v("通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据4部分组成。")]),t._v(" "),s("ul",[s("li",[t._v("3、服务器接受请求并返回HTTP响应")])]),t._v(" "),s("p",[t._v("Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据4部分组成。")]),t._v(" "),s("ul",[s("li",[t._v("4、释放连接TCP连接")])]),t._v(" "),s("p",[t._v("若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;")]),t._v(" "),s("ul",[s("li",[t._v("5、客户端浏览器解析HTML内容")])]),t._v(" "),s("p",[t._v("客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。")]),t._v(" "),s("p",[t._v("例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：")]),t._v(" "),s("ul",[s("li",[t._v("1、浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;")]),t._v(" "),s("li",[t._v("2、解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;")]),t._v(" "),s("li",[t._v("3、浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次+ 握手的第三个报文的数据发送给服务器;")]),t._v(" "),s("li",[t._v("4、服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;")]),t._v(" "),s("li",[t._v("5、释放 TCP连接;")]),t._v(" "),s("li",[t._v("6、浏览器将该 html 文本并显示内容;")])]),t._v(" "),s("h2",{attrs:{id:"get和post请求的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get和post请求的区别"}},[t._v("#")]),t._v(" GET和POST请求的区别")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&相连，如EditPosts.aspx?name=test1&id=123456. POST方法是把提交的数据放在HTTP包的Body中.")])]),t._v(" "),s("li",[s("p",[t._v("GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制.")])]),t._v(" "),s("li",[s("p",[t._v("GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值。")])]),t._v(" "),s("li",[s("p",[t._v("GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码.")])]),t._v(" "),s("li",[s("p",[t._v("GET和POST还有一个重大区别：")])])]),t._v(" "),s("ul",[s("li",[t._v("GET产生一个TCP数据包")]),t._v(" "),s("li",[t._v("POST产生两个TCP数据包")])]),t._v(" "),s("blockquote",[s("p",[t._v("长一点的解释：")])]),t._v(" "),s("ul",[s("li",[t._v("对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；")]),t._v(" "),s("li",[t._v("而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 返回数据。也就是说，GET只需要跑一趟就把货送到了，而POST需要跑两趟，首先先过去和服务器说一声，我要来送货，你准备一下，然后回头把货送回去。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);