(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{285:function(t,e,a){"use strict";a.r(e);var r=a(16),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git-使用流程规范-merge-request"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-使用流程规范-merge-request"}},[t._v("#")]),t._v(" git 使用流程规范（merge-request)")]),t._v(" "),a("p",[t._v("如果你的git workflow 采用此模式，谨记一定要忘记 git merge,除了在 master 分支上 git pull 可以使用 git pull，其他分支如果要 git pull应该使用 git pull --rebase\n使用 git rebase 的黄金法则就是：分支的开发者尽量是一个人，重写提交历史不会影响别人")]),t._v(" "),a("ol",[a("li",[t._v("新建分支")])]),t._v(" "),a("blockquote",[a("h1",{attrs:{id:"创建分之前-先切换到-master-分支-更新到最新版本-确保你的新分支是基于最新版本的master"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建分之前-先切换到-master-分支-更新到最新版本-确保你的新分支是基于最新版本的master"}},[t._v("#")]),t._v(" 创建分之前，先切换到 master 分支，更新到最新版本，确保你的新分支是基于最新版本的master")]),t._v(" "),a("h1",{attrs:{id:"在-master-分支上基本上只有一个操作-git-pull"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在-master-分支上基本上只有一个操作-git-pull"}},[t._v("#")]),t._v(" 在 master 分支上基本上只有一个操作 git pull")]),t._v(" "),a("p",[t._v("git checkout master\ngit pull")]),t._v(" "),a("h1",{attrs:{id:"创建分支-git-checkout-命令是切换分支-加上参数-b-表示如果分支不存在-就创建-且立即切换到新创建的分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建分支-git-checkout-命令是切换分支-加上参数-b-表示如果分支不存在-就创建-且立即切换到新创建的分支"}},[t._v("#")]),t._v(" 创建分支 git checkout 命令是切换分支，加上参数 -b 表示如果分支不存在，就创建，且立即切换到新创建的分支")]),t._v(" "),a("p",[t._v("git checkout -b myfeature")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("分支开发")])]),t._v(" "),a("blockquote",[a("h1",{attrs:{id:"添加工作区改变的文件到暂存区-尽量git-add-file1-file2-不提倡-git-add"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加工作区改变的文件到暂存区-尽量git-add-file1-file2-不提倡-git-add"}},[t._v("#")]),t._v(" 添加工作区改变的文件到暂存区，尽量git add file1 file2, 不提倡 git add *")]),t._v(" "),a("p",[t._v("git add *")]),t._v(" "),a("h1",{attrs:{id:"查看当前工作区的状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看当前工作区的状态"}},[t._v("#")]),t._v(" 查看当前工作区的状态")]),t._v(" "),a("p",[t._v("git status")]),t._v(" "),a("h1",{attrs:{id:"把暂存区内容放入版本库-加上-verbose-参数的话会对变化比较且显示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#把暂存区内容放入版本库-加上-verbose-参数的话会对变化比较且显示"}},[t._v("#")]),t._v(" 把暂存区内容放入版本库,加上 verbose 参数的话会对变化比较且显示")]),t._v(" "),a("p",[t._v("git commit --verbose")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("撰写提交信息")])]),t._v(" "),a("blockquote",[a("p",[t._v("git 提交的信息非常重要\n第一行是信息摘要50字以内")]),t._v(" "),a("p",[t._v("空一行，\n第三行罗列出改天原因，主要变动，注意事项\n切记提交有意义的 commit message")])]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("与主干同步")])]),t._v(" "),a("blockquote",[a("h1",{attrs:{id:"拉取远端仓库所有变更内容到本地仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拉取远端仓库所有变更内容到本地仓库"}},[t._v("#")]),t._v(" 拉取远端仓库所有变更内容到本地仓库")]),t._v(" "),a("h1",{attrs:{id:"注意和-git-pull-的区别-git-pull-git-fetch-git-merge-rebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意和-git-pull-的区别-git-pull-git-fetch-git-merge-rebase"}},[t._v("#")]),t._v(" 注意和 git pull 的区别，git pull=git fetch + git merge(rebase)")]),t._v(" "),a("p",[t._v("git fetch origin\n假设分支 myfeature 是几个人共同开发，这个时候 需要执行")]),t._v(" "),a("h1",{attrs:{id:"此操作可能会产生冲突-且解决完之后-push-的时候-可能要加上-force-参数强制推送代码-改变提交历史记录-慎用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#此操作可能会产生冲突-且解决完之后-push-的时候-可能要加上-force-参数强制推送代码-改变提交历史记录-慎用"}},[t._v("#")]),t._v(" 此操作可能会产生冲突，且解决完之后 push 的时候，可能要加上 --force 参数强制推送代码，改变提交历史记录，慎用")]),t._v(" "),a("p",[t._v("git pull --rebase")])]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[t._v("合并 commit\n此处的操作是最复杂的")])]),t._v(" "),a("blockquote",[a("p",[t._v("#rebase 命令和 merge 相仿,-i参数表示交互模式\ngit rebase -i origin/master\n使用交互模式，可以合并同一个分支里面的多个 commit 为一个或者多个，能灵活控制 commit。\n当执行 rebase 发生冲突的时候，先解决冲突文件，使用git add 标志所有冲突为已经解决。 最后 git rebase --continue 完成 rebase 流程")])]),t._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[t._v("推送代码到远端")])]),t._v(" "),a("blockquote",[a("h1",{attrs:{id:"push-命令加上-force-参数-因为-rebase-之后-分支历史改变-跟远程分支不一定兼容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#push-命令加上-force-参数-因为-rebase-之后-分支历史改变-跟远程分支不一定兼容"}},[t._v("#")]),t._v(" push 命令加上 --force 参数，因为 rebase 之后，分支历史改变，跟远程分支不一定兼容")])]),t._v(" "),a("blockquote",[a("p",[t._v("git push -u origin myfeature")])]),t._v(" "),a("ol",{attrs:{start:"7"}},[a("li",[t._v("请求代码合并 merge-request")])])])}),[],!1,null,null,null);e.default=s.exports}}]);